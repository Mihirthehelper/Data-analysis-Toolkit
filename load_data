def machine_vendor_list(filename: str, Vendor: str) -> list:
    """
    The function returns a list of machines (stored as a dictionary) that belong to the vendor provided in the input parameter. The keys of the dictionary are the labels for all attributes in the spreadsheet except “Vendor”. If the vendor provided is not on the file, the function returns an empty list
    Examples:
    >>>machine_vendor_list('machine.csv', 'adviser')
       [{'Model': '32/60', 'MCYT': '125', 'MMIN': '256',
           'MMAX': '6000', 'CACH': '256', 'PRP': '198', 'ERP': '199\n'}]
    >>>machine_vendor_list('machine.csv', 'bti')
       [{'Model': '5000', 'MCYT': '350', 'MMIN': '64', 'MMAX': '64', 'CACH': '0', 'PRP': '10', 'ERP': '15\n'}, {
           'Model': '8000', 'MCYT': '200', 'MMIN': '512', 'MMAX': '16000', 'CACH': '0', 'PRP': '35', 'ERP': '64\n'}]



    """
    infile = open(filename, "r")
    vendor_dict = []

    for line in infile:
        data = line.split(",")
        if data[0] == Vendor:
            false_dict = {'model': data[1], 'MYCT': int(data[2]), 'MMIN': int(data[3]),
                          'MMAX': int(data[4]), 'CACH': int(data[5]), 'PRP': int(data[6]), 'ERP': int(data[7])}
            vendor_dict += [false_dict]
    infile.close()
    return vendor_dict


#==========================================#
# Place your machine_model_list function after this line
def machine_model_list(file_path: str, target_model: str) -> list[dict]:
    """
    Retrieve a list of machines based on the specified machine model.

    Args:
        file_path (str): The path to the CSV file containing machine data.
        target_model (str): The machine model to search for.

    Returns:
        list[dict]: A list of dictionaries representing machines with the specified model.
                    Each dictionary contains attributes including the 'vendor'.
                    Returns an empty list if no machines match the provided model.
    """
    result = []

    try:
        with open(file_path, "r") as infile:
            # Read the header to get column names
            header = infile.readline().strip().split(',')

            for line in infile:
                row = line.strip().split(',')
                # Assuming 'Model' is at index 1, adjust if it's at a different index
                model = row[1]

                if model == target_model:
                    # Convert numeric values to integers
                    machine_data = {key: int(value) if value.isdigit(
                    ) else value for key, value in zip(header[2:], row[2:])}
                    # Add 'vendor' to the dictionary
                    machine_data['vendor'] = row[0]
                    result.append(machine_data)

    except FileNotFoundError:
        print(f"Error: File not found at path: {file_path}")

    return result


#==========================================#
# Place your machine_cache_list function after this line
def machine_cache_list(file_name, cache):
    """The function is expected to return a list of dictionary whose 'CACH' attributes are at least the input cache value called.

    >>>machine_cache_list('machine.csv', 256)
    [{'Vendor': 'adviser', 'Model': '32/60', 'MYCT': 125, 'MMIN': 256, 'MMAX': 6000, 'PRP': 198, 'ERP': 199}, {'Vendor': 'nas', 'Model': 'as/9060', 'MYCT': 30, 'MMIN': 16000, 'MMAX': 32000, 'PRP': 510, 'ERP': 603}]
    >>>machine_cache_list('machine.csv', 142)
    [{'Vendor': 'adviser', 'Model': '32/60', 'MYCT': 125, 'MMIN': 256, 'MMAX': 6000, 'PRP': 198, 'ERP': 199}, {'Vendor': 'burroughs', 'Model': 'b4955', 'MYCT': 110, 'MMIN': 5000, 'MMAX': 5000, 'PRP': 120, 'ERP': 124}, {'Vendor': 'nas', 'Model': 'as/9060', 'MYCT': 30, 'MMIN': 16000, 'MMAX': 32000, 'PRP': 510, 'ERP': 603}, {'Vendor': 'ncr', 'Model': 'v8665', 'MYCT': 38, 'MMIN': 8000, 'MMAX': 24000, 'PRP': 140, 'ERP': 281}]
    """
    my_list = []
    infile = open(file_name, 'r')
    header = infile.readline()
    header = header.strip().split(",")

    for line in infile:
        line = line.strip().split(",")
        my_dict = {}
        my_dict[header[0]] = line[0]
        my_dict[header[1]] = line[1]
        my_dict[header[2]] = int(line[2])
        my_dict[header[3]] = int(line[3])
        my_dict[header[4]] = int(line[4])
        my_dict[header[5]] = int(line[5])
        my_dict[header[6]] = int(line[6])
        my_dict[header[7]] = int(line[7])

        if my_dict[header[5]] >= cache:

            my_list.append(my_dict)
            my_dict.pop('CACH')

    infile.close()
    return my_list


#==========================================#
# Place your machine_prp_list function after this line


def machine_prp_list(filename: str, prp: int) -> list:
    """
    Returns a list of machines (stored as a dictionary) with at least 
    the published relative performance provided in the input parameter.
    If no computers meet the requirement, the function returns an empty list.

    >>> machine_prp_list('machine.csv', 150)
    [ {'Vendor': 'adviser', 'Model': '32/60', 'MYCT': 125, 'MMIN': 256, 
    'MMAX': 6000, 'CACH': 256, 'ERP': 199}, {another element}, ... ]

    >>>machine_prp_list('machine.csv', 1500)
    []
    """

    machine_list = []

    file = open(filename)

    for line in file:
        data_list = line.split(',')

        for data in data_list:
            data = data.strip('\n')

        data_list[-1] = data

        machine_list.append(data_list)

    file.close()

    data_dict = {}

    machine_list_2 = []

    for data in machine_list:
        if data[6].isdigit() and int(data[6]) >= prp:
            data_dict[machine_list[0][0]] = data[0]
            data_dict[machine_list[0][1]] = data[1]
            data_dict[machine_list[0][2]] = int(data[2])
            data_dict[machine_list[0][3]] = int(data[3])
            data_dict[machine_list[0][4]] = int(data[4])
            data_dict[machine_list[0][5]] = int(data[5])
            data_dict[machine_list[0][7]] = int(data[7])

            machine_list_2.append(data_dict)

            data_dict = {}

    return machine_list_2


#==========================================#
# Place your load_data function after this line

def load_data(filename: str, filter_params: tuple) -> list:
    if filter_params[0].lower() == 'vendor':
        return machine_vendor_list(filename, filter_params[1])

    if filter_params[0].lower() == 'model':
        return machine_model_list(filename, filter_params[1])

    if filter_params[0].lower() == 'cach':
        return machine_cache_list(filename, filter_params[1])

    if filter_params[0].lower() == 'prp':
        return machine_prp_list(filename, filter_params[1])

    if filter_params[0].lower() == 'all':

        infile = open(filename, "r")  # opens and reads csv file
        vendor_dict = []  # empty student list

        for line in infile:
            data = line.strip().split(",")
            if data[0] != "Vendor":
                false_dict = {'Vendor': data[0], 'model': data[1], 'MYCT': int(data[2]), 'MMIN': int(data[3]),
                              'MMAX': int(data[4]), 'CACH': int(data[5]), 'PRP': int(data[6]), 'ERP': int(data[7])}
                # appends temp dict to student list
                vendor_dict += [false_dict]

        infile.close()

        return vendor_dict

    else:
        print('Invalid Value')
        return []

    try:
        # Extract attribute and value from filter_params
        attribute, value = filter_params[0].upper(), filter_params[1]

        # Read the CSV file
        with open(file_name, 'r') as infile:
            header = infile.readline().strip().split(',')
            result = []

            # Check if the attribute is valid
            if attribute == 'ALL' or attribute.upper() in map(str.upper, header):
                for line in infile:
                    row = line.strip().split(',')

                    # Check if the value is numeric or 'ALL'
                    if attribute == 'ALL' or (
                            attribute.upper() in map(str.upper, header)
                            and (not str(value).lstrip('-').isdigit() or int(row[header.index(attribute)]) >= int(value))
                    ):
                        # Create a dictionary for the current row
                        machine_data = {key: int(val) if val.isdigit(
                        ) else val for key, val in zip(header, row)}
                        result.append(machine_data)

            else:
                print("Invalid Value")
                result = []

    except FileNotFoundError:
        print(f"Error: File not found at path: {file_name}")
        result = []

    return result

#==========================================#
# Place your add_average_main_memory function after this line


def add_average_main_memory(machine_dict: dict) -> list:
    """
        This function returns the average main memory in a dictionary and adds this average to the dictionary.
    """
    for line in machine_dict:
        average = round((line['MMIN'] + line['MMAX']) / 2, 2)

        line['M_AVG'] = average

    return machine_dict
